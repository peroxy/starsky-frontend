/* tslint:disable */
/* eslint-disable */
/**
 * Starsky API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {LoginRequest, LoginRequestToJSON, TokenResponse, TokenResponseFromJSON,} from '../models';

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Login an existing user with their email and password. The API will return a newly created JWT Bearer token with its expiry date.
     * Login an existing user
     */
    async loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Login an existing user with their email and password. The API will return a newly created JWT Bearer token with its expiry date.
     * Login an existing user
     */
    async login(requestParameters: LoginOperationRequest): Promise<TokenResponse> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

}
