/* tslint:disable */
/* eslint-disable */
/**
 * Starsky API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInviteRequest,
    CreateInviteRequestFromJSON,
    CreateInviteRequestToJSON,
    InviteResponse,
    InviteResponseFromJSON,
    InviteResponseToJSON,
} from '../models';

export interface CreateInviteOperationRequest {
    createInviteRequest: CreateInviteRequest;
}

export interface DeleteInviteRequest {
    inviteId: number;
}

export interface GetInviteByIdRequest {
    inviteId: number;
}

/**
 * 
 */
export class InviteApi extends runtime.BaseAPI {

    /**
     * Send an invite email to the specified employee so they can create a new Starsky account and join the manager\'s team. Authenticated user must have manager role.
     * Send a new invite
     */
    async createInviteRaw(requestParameters: CreateInviteOperationRequest): Promise<runtime.ApiResponse<InviteResponse>> {
        if (requestParameters.createInviteRequest === null || requestParameters.createInviteRequest === undefined) {
            throw new runtime.RequiredError('createInviteRequest','Required parameter requestParameters.createInviteRequest was null or undefined when calling createInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/invites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInviteRequestToJSON(requestParameters.createInviteRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteResponseFromJSON(jsonValue));
    }

    /**
     * Send an invite email to the specified employee so they can create a new Starsky account and join the manager\'s team. Authenticated user must have manager role.
     * Send a new invite
     */
    async createInvite(requestParameters: CreateInviteOperationRequest): Promise<InviteResponse> {
        const response = await this.createInviteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an invite. The invited employee will not be able to register after this operation.  Authenticated user must have manager role.
     * Delete invite
     */
    async deleteInviteRaw(requestParameters: DeleteInviteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling deleteInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/invites/{invite_id}`.replace(`{${"invite_id"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an invite. The invited employee will not be able to register after this operation.  Authenticated user must have manager role.
     * Delete invite
     */
    async deleteInvite(requestParameters: DeleteInviteRequest): Promise<void> {
        await this.deleteInviteRaw(requestParameters);
    }

    /**
     * Returns the invite by id. Authenticated user must have manager role.
     * Get sent invite
     */
    async getInviteByIdRaw(requestParameters: GetInviteByIdRequest): Promise<runtime.ApiResponse<InviteResponse>> {
        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling getInviteById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/invites/{invite_id}`.replace(`{${"invite_id"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteResponseFromJSON(jsonValue));
    }

    /**
     * Returns the invite by id. Authenticated user must have manager role.
     * Get sent invite
     */
    async getInviteById(requestParameters: GetInviteByIdRequest): Promise<InviteResponse> {
        const response = await this.getInviteByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the currently authenticated user\'s invites. Authenticated user must have manager role.
     * Get all sent invites
     */
    async getInvitesRaw(): Promise<runtime.ApiResponse<Array<InviteResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/invites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InviteResponseFromJSON));
    }

    /**
     * Returns the currently authenticated user\'s invites. Authenticated user must have manager role.
     * Get all sent invites
     */
    async getInvites(): Promise<Array<InviteResponse>> {
        const response = await this.getInvitesRaw();
        return await response.value();
    }

}
