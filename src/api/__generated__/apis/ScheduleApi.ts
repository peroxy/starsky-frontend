/* tslint:disable */
/* eslint-disable */
/**
 * Starsky API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateScheduleRequest,
    CreateScheduleRequestFromJSON,
    CreateScheduleRequestToJSON,
    ScheduleResponse,
    ScheduleResponseFromJSON,
    ScheduleResponseToJSON,
    ScheduleUnsolvableResponse,
    ScheduleUnsolvableResponseFromJSON,
    ScheduleUnsolvableResponseToJSON,
    UpdateScheduleRequest,
    UpdateScheduleRequestFromJSON,
    UpdateScheduleRequestToJSON,
} from '../models';

export interface CreateScheduleOperationRequest {
    teamId: number;
    createScheduleRequest: CreateScheduleRequest;
}

export interface DeleteScheduleRequest {
    scheduleId: number;
}

export interface GetScheduleByIdRequest {
    scheduleId: number;
}

export interface GetSchedulesRequest {
    teamId?: number;
}

export interface SolveScheduleByIdRequest {
    scheduleId: number;
}

export interface UpdateScheduleOperationRequest {
    scheduleId: number;
    updateScheduleRequest: UpdateScheduleRequest;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     * Creates a new schedule that is assigned to the specified team. Authenticated user must have manager role.
     * Create a new schedule
     */
    async createScheduleRaw(requestParameters: CreateScheduleOperationRequest): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling createSchedule.');
        }

        if (requestParameters.createScheduleRequest === null || requestParameters.createScheduleRequest === undefined) {
            throw new runtime.RequiredError('createScheduleRequest','Required parameter requestParameters.createScheduleRequest was null or undefined when calling createSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/teams/{team_id}/schedules`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScheduleRequestToJSON(requestParameters.createScheduleRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new schedule that is assigned to the specified team. Authenticated user must have manager role.
     * Create a new schedule
     */
    async createSchedule(requestParameters: CreateScheduleOperationRequest): Promise<ScheduleResponse> {
        const response = await this.createScheduleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a specified schedule. This will also cascade delete schedule shifts and employee availabilities. Authenticated user must have manager role.
     * Delete schedule
     */
    async deleteScheduleRaw(requestParameters: DeleteScheduleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling deleteSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specified schedule. This will also cascade delete schedule shifts and employee availabilities. Authenticated user must have manager role.
     * Delete schedule
     */
    async deleteSchedule(requestParameters: DeleteScheduleRequest): Promise<void> {
        await this.deleteScheduleRaw(requestParameters);
    }

    /**
     * Returns a schedule with specified id. Managers can get all schedules they created, while employees may only get schedules from their team.
     * Get schedule by id
     */
    async getScheduleByIdRaw(requestParameters: GetScheduleByIdRequest): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling getScheduleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * Returns a schedule with specified id. Managers can get all schedules they created, while employees may only get schedules from their team.
     * Get schedule by id
     */
    async getScheduleById(requestParameters: GetScheduleByIdRequest): Promise<ScheduleResponse> {
        const response = await this.getScheduleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of all schedules. Optionally you can filter by team by supplying the query parameter.
     * Get all schedules
     */
    async getSchedulesRaw(requestParameters: GetSchedulesRequest): Promise<runtime.ApiResponse<Array<ScheduleResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.teamId !== undefined) {
            queryParameters['team_id'] = requestParameters.teamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScheduleResponseFromJSON));
    }

    /**
     * Returns a list of all schedules. Optionally you can filter by team by supplying the query parameter.
     * Get all schedules
     */
    async getSchedules(requestParameters: GetSchedulesRequest): Promise<Array<ScheduleResponse>> {
        const response = await this.getSchedulesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the solved schedule with employee assignments. Manager only route.
     * Get solved schedule\'s employee assignments
     */
    async solveScheduleByIdRaw(requestParameters: SolveScheduleByIdRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling solveScheduleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/schedules/{schedule_id}/solve`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns the solved schedule with employee assignments. Manager only route.
     * Get solved schedule\'s employee assignments
     */
    async solveScheduleById(requestParameters: SolveScheduleByIdRequest): Promise<string> {
        const response = await this.solveScheduleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update any property of the specified schedule. Authenticated user must have manager role.
     * Update schedule
     */
    async updateScheduleRaw(requestParameters: UpdateScheduleOperationRequest): Promise<runtime.ApiResponse<ScheduleResponse>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling updateSchedule.');
        }

        if (requestParameters.updateScheduleRequest === null || requestParameters.updateScheduleRequest === undefined) {
            throw new runtime.RequiredError('updateScheduleRequest','Required parameter requestParameters.updateScheduleRequest was null or undefined when calling updateSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduleRequestToJSON(requestParameters.updateScheduleRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleResponseFromJSON(jsonValue));
    }

    /**
     * Update any property of the specified schedule. Authenticated user must have manager role.
     * Update schedule
     */
    async updateSchedule(requestParameters: UpdateScheduleOperationRequest): Promise<ScheduleResponse> {
        const response = await this.updateScheduleRaw(requestParameters);
        return await response.value();
    }

}
